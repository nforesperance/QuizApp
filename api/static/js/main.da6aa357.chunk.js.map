{"version":3,"sources":["components/Question.js","components/Verify.js","constants/settings.js","components/Main.js","App.js","components/404.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["Question","props","onChange","e","addData","id","target","value","number","item","question","then","console","log","data","sort","a","b","setState","state","radioStyle","display","height","lineHeight","this","form","getFieldDecorator","className","index","total","Group","answers","map","i","answer","style","key","React","Component","FirstForm","Form","create","connect","dispatch","Promise","resolve","type","payload","Third","current","store","questions","score","forEach","elt1","elt2","correct","getScore","length","MainForm","route","Main","visble","infos","quiz_name","axios","get","get_questions","document","getElementById","res","arrangeQuestions","quiz","max","name","elt","A","B","C","D","push","Array","prototype","shuffle","m","Math","random","maxnumber","Steps","Step","steps","title","content","marginLeft","onClick","prev","next","marginRight","getAllData","App","Boolean","window","location","hostname","match","initState","chosenIds","rootReducer","action","idAlready","indexOf","copy","slice","filter","el","createStore","ReactDOM","render"],"mappings":"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","file":"static/js/main.da6aa357.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Form, Radio } from 'antd';\r\nimport formItemLayout from '../constants/formwrappercss';\r\nimport { connect } from 'react-redux'\r\nclass Question extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: \"None\",\r\n    };\r\n  }\r\n  onChange = e =>{\r\n    this.props.addData({ id: e.target.value, number: this.props.item.number, question: this.props.item.question }, 'ADD').then(() => {\r\n      console.log(this.props.data.sort((a, b) => (a.number > b.number) ? 1 : -1))\r\n    })\r\n    this.setState({\r\n      value: e.target.value,\r\n    })\r\n  }\r\n  render() {\r\n    const radioStyle = {\r\n      display: 'block',\r\n      height: '30px',\r\n      lineHeight: '30px',\r\n    };\r\n    const { value } = this.state;\r\n    const { getFieldDecorator } = this.props.form;\r\n    return (\r\n      <div className=\"container question\">\r\n        <center><h4>Question {this.props.index}/{this.props.total}</h4></center>\r\n        <div className=\"card\">\r\n          <div className=\"card-header mt-2\">\r\n            <h5>{this.props.item.question}</h5>\r\n          </div>\r\n\r\n        </div>\r\n        <Radio.Group onChange={this.onChange} value={value}>\r\n          {this.props.item.answers.map(({ id, answer }, i) => (\r\n            <strong>\r\n              <Radio style={radioStyle} value={id} key={i+id+answer}>\r\n                {answer}\r\n              </Radio>\r\n            </strong>\r\n          ))}\r\n        </Radio.Group>\r\n\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\nconst FirstForm = Form.create({})(Question);\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addData: (data) => new Promise(\r\n      resolve => {\r\n        dispatch({ type: 'ADD', payload: data });\r\n        resolve()\r\n      })\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    data: state.data\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FirstForm);\r\n","import React, { Component } from 'react';\r\nimport { Form } from 'antd';\r\nimport { connect } from 'react-redux'\r\n\r\nclass Third extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      current: 0\r\n    };\r\n  }\r\n  getScore() {\r\n    let store = this.props.data\r\n    let questions = this.props.questions\r\n    let score = 0;\r\n    questions.forEach(elt1 => {\r\n      store.forEach(elt2 => {\r\n        if ((elt1.number === elt2.number) && (elt1.correct === elt2.id)) {\r\n          score++;\r\n        }\r\n      });\r\n    });\r\n    return score;\r\n  }\r\n  render() {\r\n    let questions = this.props.questions\r\n    return (\r\n      <div id=\"container\">\r\n        <center><h4 className=\"tittle\" >Results</h4>\r\n          <div className=\"card\">\r\n            <div className=\"card-header\">\r\n              <h4>{this.getScore()}/{questions.length}</h4>\r\n            </div>\r\n          </div>\r\n        </center>\r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    data: state.data\r\n  }\r\n}\r\nconst MainForm = Form.create({})(Third);\r\n\r\nexport default connect(mapStateToProps)(MainForm);","const route = {\r\n    \"get_questions\":\"http://localhost:8000/api/quiz/\",\r\n    \"submit\":\"http://locahost:8000/api/quiz/submit\",\r\n} \r\nexport default route","import { Button, Form, Steps } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Question from './Question';\r\nimport Last from './Verify';\r\nimport axios from 'axios';\r\nimport route from '../constants/settings';\r\n\r\n\r\n\r\n\r\n\r\nclass Main extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      current: 0,\r\n      visble: false,\r\n      infos: [],\r\n      questions: [],\r\n      quiz_name:''\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    axios.get(route.get_questions + document.getElementById(\"quiz_id\").value)\r\n      .then(res => {\r\n        this.arrangeQuestions(res.data.quiz, res.data.max,res.data.name)\r\n\r\n      })\r\n\r\n  }\r\n  arrangeQuestions(quiz, max,quiz_name) {\r\n    let questions = []\r\n    quiz.forEach(elt => {\r\n      let answers = [\r\n        {\r\n          \"id\": \"A\",\r\n          \"answer\": elt.A\r\n        },\r\n        {\r\n          \"id\": \"B\",\r\n          \"answer\": elt.B\r\n        },\r\n        {\r\n          \"id\": \"C\",\r\n          \"answer\": elt.C\r\n        },\r\n        {\r\n          \"id\": \"D\",\r\n          \"answer\": elt.D\r\n        },\r\n\r\n      ]\r\n      let question = {\r\n        \"number\": elt.number,\r\n        \"question\": elt.question,\r\n        \"correct\": elt.correct,\r\n        \"answers\": answers\r\n      }\r\n      questions.push(question)\r\n    });\r\n    // Shuffling the array to produce random questions\r\n    Array.prototype.shuffle = function () {\r\n      let m = this.length, i;\r\n      while (m) {\r\n        i = (Math.random() * m--) >>> 0;\r\n        [this[m], this[i]] = [this[i], this[m]]\r\n      }\r\n      return this;\r\n    }\r\n    questions.shuffle();\r\n    let display = []\r\n    // Lets ensure that Max is les than total number of questions\r\n    let maxnumber = max < quiz.length ? max : quiz.length\r\n\r\n    for (let index = 0; index < maxnumber; index++) {\r\n      display.push(questions[index]);\r\n\r\n    }\r\n    this.setState({ questions: display,quiz_name })\r\n  }\r\n  next() {\r\n\r\n    const current = this.state.current + 1;\r\n    this.setState({ current });\r\n\r\n  }\r\n  prev() {\r\n    const current = this.state.current - 1;\r\n    // console.log(current)\r\n    this.setState({ current });\r\n  }\r\n  render() {\r\n    const { Step } = Steps;\r\n    const { current } = this.state;\r\n    let steps = []\r\n    this.state.questions.map((item, index) => {\r\n      steps.push(\r\n        {\r\n          title: \"Step x\",\r\n          content: <Question form={this.props.form} item={item} index={index + 1} total={this.state.questions.length} />\r\n        }\r\n      )\r\n    })\r\n    steps.push(\r\n      {\r\n        title: \"Step 4\",\r\n        content: <Last form={this.props.form} questions={this.state.questions} />\r\n      }\r\n    )\r\n    return (\r\n      <div className=\"steps\" >\r\n        {/* <Steps current={current}>\r\n          {steps.map((item ,index) => (\r\n            <Step key={index} title={item.title} />\r\n          ))}\r\n        </Steps> */}\r\n        <center><h3>{this.state.quiz_name}</h3></center>\r\n        {steps.map(({ title, content }, i) => (\r\n          <div\r\n            key={title + i}\r\n            className={i === this.state.current ? \"foo fade-in\" : \"foo\"}\r\n          >\r\n            {content}\r\n          </div>\r\n        ))}\r\n        <div className=\"steps-action\">\r\n          {current > 0 && (\r\n            <Button style={{ marginLeft: 8 }} onClick={() => this.prev()} className=\"but\">\r\n              Previous\r\n            </Button>\r\n          )}\r\n          {current < steps.length - 2 && (\r\n            <Button type=\"primary\" onClick={() => this.next()} id=\"suivant\" className=\"but\">\r\n              Next\r\n            </Button>\r\n          )}\r\n          {current === steps.length - 2 && (\r\n            <Button type=\"primary\" onClick={() => this.next()} id=\"suivant\" className=\"but\">\r\n              Finish\r\n            </Button>\r\n          )}\r\n          {current === steps.length - 1 && (\r\n            <Button style={{ marginRight: 8 }} type=\"primary\" onClick={() => this.getAllData()} id=\"suivant\" className=\"but\">\r\n              Sumit\r\n            </Button>\r\n          )}\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addData: (data) => new Promise(\r\n      resolve => {\r\n        dispatch({ type: 'ADD', payload: data });\r\n        resolve()\r\n      })\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    data: state.data\r\n  }\r\n}\r\nconst MainForm = Form.create({})(Main);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainForm);\r\n","import React, { Component } from 'react';\r\nimport {Route,BrowserRouter as Router,Switch} from 'react-router-dom';\r\nimport Main from './components/Main';\r\nimport Error from './components/404';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <nav className=\"navbar navbar-expand navbar-light bg-faded\" id=\"nav\" />\r\n        <div id=\"reserve_title\" />\r\n        <div className=\"row head1\">\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-3\">\r\n            <div className=\"row\" id=\"top_row\">\r\n              <br />\r\n              <br />\r\n            </div>\r\n            <div className=\"row\" />\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <div id=\"main_form\">\r\n              <Main />\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <div className=\"row\" id=\"top_row\">\r\n              <br />\r\n              <br />\r\n            </div>\r\n            <div className=\"row\" />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst FinalApp = props => {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={App} />\r\n        <Route component={Error} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\nexport default App;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Error extends React.Component {\r\n  render() {\r\n    return (\r\n      <div style={{ textAlign: 'center' }}>\r\n       <h1>404 Error</h1>\r\n        <h1>Sorry! This page does not exists</h1>\r\n        <Link to=\"./\">Return </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Error;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","  const initState ={\r\n      data:[],\r\n      chosenIds:[]\r\n  }\r\n \r\n  const rootReducer = (state = initState,action) =>{\r\n      switch (action.type) {\r\n          case 'ADD':{\r\n           let idAlready = state.chosenIds.indexOf(action.payload.question)>-1;\r\n          //making a copy of the sta chosenIds and data\r\n          let copy =state.data.slice();\r\n          if(idAlready){\r\n              // chosenIds = chosenIds.filter(id=>id!==action.payload.id);\r\n              copy = copy.filter(el=>el.question!==action.payload.question);\r\n              return{\r\n                ...state,\r\n                data:[...copy,action.payload]\r\n              };\r\n          }\r\n          else{\r\n            return{\r\n                ...state,\r\n              data:[...state.data,action.payload],\r\n              chosenIds:[...state.chosenIds,action.payload.question]\r\n          } \r\n        \r\n          }\r\n          }\r\n          case 'UPDATE':{\r\n             return{\r\n               ...state,\r\n               data:[...action.payload]\r\n             }\r\n          }            \r\n      \r\n          default:{\r\n            return state\r\n          }\r\n               \r\n        }\r\n  }\r\n \r\n  export default rootReducer","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"./static/css/bootstrap.min.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { createStore } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport rootReducer from \"./reducers/rootReducer\";\r\nimport '../node_modules/antd/dist/antd.css'\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\n// serviceWorker.register();\r\n"],"sourceRoot":""}